
def solveNQ(n,firstQueenCol):
    col = set()
    posDiag = set()
    negDiag = set()
    res = []
    board = [["."] * n for _ in range(n)]
    
    def backtrack(r):
        if r == n:
            res.append(["".join(row) for row in board])
            return
        for c in range(n):
            if c in col or (r+c) in posDiag or (r-c) in negDiag:
                continue
            col.add(c)
            posDiag.add(r+c)
            negDiag.add(r-c)
            board[r][c] ="Q"
            backtrack(r+1)
            col.remove(c)
            posDiag.remove(r+c)
            negDiag.remove(r-c)
            board[r][c] ="."
        
        
    col.add(firstQueenCol)
    posDiag.add(0+firstQueenCol)
    negDiag.add(0-firstQueenCol)
    board[0][firstQueenCol] = "Q"
    backtrack(1)
    return res

n = int(input("Enter the size of board = "))
firstQueenCol = int(input("Enter the col of first queen = "))
board = solveNQ(n,firstQueenCol)[0]
for row in board:
    print(" ".join(row))
    
    
    